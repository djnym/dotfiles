#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;

use constant OFFSET => 1; # Index offset.

my $help      = 0;
my $man       = 0;
my @fields    = ();
my $numrange  = undef;

GetOptions ("f=s"       => \$numrange,
            "help"    => \$help,
            "man"     => \$man
           ) or pod2usage (2);

if (defined $numrange && $numrange !~ m/^[\d\,\-]+$/) {
  print STDERR "bad numrange \"$numrange\"\n";
  exit(1);
}

# Expands a string describing a list of ranges into its elements.
# valid range definitions are
# 1,2,3
# 1-3
# 1-3,2-5,7,9
sub expand_ranges {
  return map { m/(\d+)-(\d+)/ ? $1..$2 : $_ } split(m/,/, $_[0]);
}

@fields = expand_ranges($numrange);

sub csvsplit {
    my $line = shift;
    my $sep = (shift or ',');

    return () unless $line;

    my @cells;
    $line =~ s/\r?\n$//;

    my $re = qr/(?:^|$sep)(?:"([^"]*)"|([^$sep]*))/;

    while($line =~ /$re/g) {
        my $value = defined $1 ? $1 : $2;
        push @cells, (defined $value ? $value : '');
    }

    return @cells;
}

my $total_fields = scalar (@fields);
while (my $line = <ARGV>) {
  chomp $line;
  my @cols = csvsplit ($line);
  my $first = 1;
  foreach my $i (@fields) {
    if ($first) {
      print "$cols[$i]";
      $first = 0;
    } else {
      print "\t$cols[$i]";
    }
  }
  print "\n";
}
__END__

=head1 NAME

csvcut - like cut for csv files

=head1 SYNOPSIS

csvcut -f<fields> <files>

=head1 OPTIONS

=over 8

=item B<-f>

Fields to cut

=item B<--help>

Short help

=item B<--man>

Longer help

=back

=head1 DESCRIPTION

This will read a csv file and cut columns out.

=head1 AUTHOR

Anthony Molinaro <anthony.molinaro@openx.org>

=cut
